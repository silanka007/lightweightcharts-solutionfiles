{"version":3,"sources":["components/tvchart/index.jsx","components/filter/index.jsx","App.js","index.js"],"names":["forwardRef","props","ref","className","Filter","App","chartRef","useRef","useState","loading","setLoading","fetchedData","setFetchedData","useEffect","chart","createChart","current","width","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","localization","dateFormat","timeScale","timeVisible","secondsVisible","lineSeries","addLineSeries","subscribe","ws","WebSocket","onopen","send","JSON","stringify","onmessage","e","value","parse","data","type","prevData","time","parseInt","Date","getTime","parseFloat","price","console","log","setData","remove","close","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySASeA,G,YAAAA,sBANC,SAACC,EAAOC,GACpB,OACI,6BAASC,UAAU,QAAQD,IAAKA,QCczBE,G,MAfA,WACX,OACI,6BAASD,UAAU,UACf,wBAAIA,UAAU,eACV,4BAAI,4BAAQA,UAAU,oBAAlB,QAAJ,KACA,4BAAI,4BAAQA,UAAU,oBAAlB,OACJ,4BAAI,4BAAQA,UAAU,oBAAlB,OACJ,4BAAI,4BAAQA,UAAU,oBAAlB,OACJ,4BAAI,4BAAQA,UAAU,oBAAlB,OACJ,4BAAI,4BAAQA,UAAU,oBAAlB,WC+ELE,MAnFf,WACE,IAAMC,EAAWC,iBAAO,MADX,EAEkBC,oBAAS,GAF3B,mBAENC,EAFM,KAEGC,EAFH,OAGyBF,mBAAS,IAHlC,mBAGNG,EAHM,KAGOC,EAHP,KAoEb,OA/DAC,qBAAU,WACR,IAAMC,EAAQC,YAAYT,EAASU,QAAS,CAC1CC,MAAOX,EAASW,MAClBC,OAAQZ,EAASY,OACfC,OAAQ,CACJC,gBAAiB,UACjBC,UAAW,uBAEfC,KAAM,CACFC,UAAW,CACPC,MAAO,4BAEXC,UAAW,CACPD,MAAO,6BAGfE,aAAc,CACZC,WAAY,cAEdC,UAAW,CACTC,aAAa,EACbC,gBAAgB,KAIhBC,EAAajB,EAAMkB,gBAEjBC,EAAY,CACd,KAAQ,YACR,SAAY,CACR,SACA,YACA,CACI,KAAQ,SACR,YAAe,CACX,cAKVC,EAAK,IAAIC,UAAU,kCAgBzB,OAfAD,EAAGE,OAAS,WACVF,EAAGG,KAAKC,KAAKC,UAAUN,KAEzBC,EAAGM,UAAY,SAAAC,GACb,IAAMC,EAAQJ,KAAKK,MAAMF,EAAEG,MACT,WAAfF,EAAMG,OAGTnC,GAAW,GACXE,GAAe,SAAAkC,GAAQ,4BAAQA,GAAR,CAAkB,CAACC,KAAMC,SAAS,IAAIC,KAAKP,EAAMK,MAAMG,WAAYR,MAAOS,WAAWT,EAAMU,aAClHC,QAAQC,IAAI3C,KAGdoB,EAAWwB,QAAQ5C,GAEZ,WACLG,EAAM0C,SACNtB,EAAGuB,WAEJ,CAAC9C,IAIF,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAAlB,wBAIEM,EAAU,aAAgB,kBAAC,EAAD,MAE5B,kBAAC,EAAD,CAASP,IAAKI,MChFpBoD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c8afc91e.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\nimport './tvchart.style.scss';\n\nconst TvChart = (props, ref) => {\n    return (\n        <section className=\"chart\" ref={ref}></section>\n    )\n}\n\nexport default forwardRef(TvChart);","import React from 'react';\n\nimport './filter.style.scss';\n\nconst Filter = () => {\n    return (\n        <section className=\"filter\">\n            <ul className=\"filter-list\">\n                <li><button className=\"filter-list-item\">zoom</button> </li>\n                <li><button className=\"filter-list-item\">1d</button></li>\n                <li><button className=\"filter-list-item\">7d</button></li>\n                <li><button className=\"filter-list-item\">1m</button></li>\n                <li><button className=\"filter-list-item\">3m</button></li>\n                <li><button className=\"filter-list-item\">1y</button></li>\n            </ul>\n        </section>\n    )\n}\n\nexport default Filter;","import React, { useState, useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\n\nimport './App.css';\nimport TvChart from './components/tvchart';\nimport Filter from './components/filter';\n\n\n\nfunction App() {\n  const chartRef = useRef(null);\n  const [loading, setLoading ] = useState(true);\n  const [fetchedData, setFetchedData] = useState([])\n\n  useEffect(() => {\n    const chart = createChart(chartRef.current, {\n      width: chartRef.width,\n    height: chartRef.height,\n      layout: {\n          backgroundColor: '#ffffff',\n          textColor: 'rgba(33, 56, 77, 1)',\n      },\n      grid: {\n          vertLines: {\n              color: 'rgba(197, 203, 206, 0.7)',\n          },\n          horzLines: {\n              color: 'rgba(197, 203, 206, 0.7)',\n          },\n      },\n      localization: {\n        dateFormat: 'yyyy/MM/dd',\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false\n      }\n  });\n\n  const lineSeries = chart.addLineSeries();\n\n    const subscribe = {\n        \"type\": \"subscribe\",\n        \"channels\": [\n            \"level2\",\n            \"heartbeat\",\n            {\n                \"name\": \"ticker\",\n                \"product_ids\": [\n                    \"BTC-USD\",\n                ]\n            }\n        ],\n    }\n    const ws = new WebSocket('wss://ws-feed.pro.coinbase.com');\n    ws.onopen = () => {\n      ws.send(JSON.stringify(subscribe))\n    }\n    ws.onmessage = e => {\n      const value = JSON.parse(e.data);\n      if(value.type !== 'ticker'){\n        return;\n      }\n      setLoading(false); \n      setFetchedData(prevData => [...prevData, {time: parseInt(new Date(value.time).getTime()), value: parseFloat(value.price)}])\n      console.log(fetchedData)\n    }\n\n    lineSeries.setData(fetchedData)\n\n    return () => {\n      chart.remove();\n      ws.close()\n    }\n  }, [fetchedData]);\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        BTC-USD Crypto Chart\n      </header>\n      {\n        loading ? 'loading...' :  <Filter />\n      }\n      <TvChart ref={chartRef} />\n\n    </div>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}